{"version":3,"sources":["NewBoxForm.js","Box.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["NewBoxForm","props","state","color","width","height","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","newBox","id","uuid","createBox","onSubmit","className","htmlFor","type","onChange","placeholder","onClick","Component","Box","style","backgroundColor","removeBox","BoxList","boxes","create","filter","box","map","key","remove","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"snBAIO,IAoEQA,EApEf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,MAAO,GACPC,OAAQ,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,EADrB,0EAYeE,GACXC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,UAb9C,mCAeeL,GACXA,EAAEM,iBACF,IAAMC,E,qVAAM,IAAQN,KAAKR,MAAb,CAAoBe,GAAIC,QACpCR,KAAKT,MAAMkB,UAAUH,GACrBN,KAAKC,SAAS,CACZR,MAAO,GACPC,MAAO,GACPC,OAAQ,OAtBd,+BA2BI,OACE,0BAAMe,SAAUV,KAAKF,aAAca,UAAU,cAC3C,6BACE,2BAAOC,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLV,KAAK,QACLI,GAAG,QACHH,MAAOJ,KAAKR,MAAMC,MAClBqB,SAAUd,KAAKJ,aACfmB,YAAY,kBAGhB,6BACE,2BAAOH,QAAQ,SAAf,SACA,2BACEC,KAAK,OACLV,KAAK,QACLI,GAAG,QACHH,MAAOJ,KAAKR,MAAME,MAClBoB,SAAUd,KAAKJ,aACfmB,YAAY,kBAGhB,6BACE,2BAAOH,QAAQ,UAAf,UACA,2BACEC,KAAK,OACLV,KAAK,SACLI,GAAG,SACHH,MAAOJ,KAAKR,MAAMG,OAClBmB,SAAUd,KAAKJ,aACfmB,YAAY,kBAGhB,4BAAQC,QAAShB,KAAKF,cAAtB,sBA9DR,GAAgCmB,aCejBC,G,MAhBH,SAAA3B,GACV,IAAI4B,EAAQ,CACVC,gBAAiB7B,EAAME,MACvBC,MAAM,GAAD,OAAKH,EAAMG,MAAX,MACLC,OAAO,GAAD,OAAKJ,EAAMI,OAAX,OAGR,OACE,yBAAKgB,UAAU,OACb,yBAAKQ,MAAOA,GACV,4BAAQH,QAASzB,EAAM8B,WAAvB,SCiCOC,EAzCf,YACE,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX+B,MAAO,IAET,EAAKC,OAAS,EAAKA,OAAO3B,KAAZ,gBALG,EADrB,oEASSS,GACLN,KAAKC,SAAS,CACZsB,MAAM,GAAD,mBAAMvB,KAAKR,MAAM+B,OAAjB,CAAwBjB,QAXnC,6BAeSC,GACLP,KAAKC,SAAS,CACZsB,MAAOvB,KAAKR,MAAM+B,MAAME,OAAO,SAAAC,GAAG,OAAIA,EAAInB,IAAMA,QAjBtD,+BAqBY,IAAD,OACDgB,EAAQvB,KAAKR,MAAM+B,MAAMI,IAAI,SAAAD,GAAG,OACpC,kBAAC,EAAD,CACEE,IAAKF,EAAInB,GACTA,GAAImB,EAAInB,GACRd,MAAOiC,EAAIjC,MACXC,MAAOgC,EAAIhC,MACXC,OAAQ+B,EAAI/B,OACZ0B,UAAW,kBAAM,EAAKQ,OAAOH,EAAInB,SAGrC,OACE,6BACE,kBAAC,EAAD,CAAYE,UAAWT,KAAKwB,SAC5B,yBAAKb,UAAU,SAASY,QAnChC,GAA6BN,aCQda,MATf,WACE,OACE,yBAAKnB,UAAU,OACb,+CACA,kBAAC,EAAD,QCIcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9a216ac3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./NewBoxForm.css\";\nimport uuid from \"uuid/v4\";\n\nexport class NewBoxForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"\",\n      width: \"\",\n      height: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    const newBox = { ...this.state, id: uuid() };\n    this.props.createBox(newBox);\n    this.setState({\n      color: \"\",\n      width: \"\",\n      height: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"NewBoxForm\">\n        <div>\n          <label htmlFor=\"color\">Color</label>\n          <input\n            type=\"text\"\n            name=\"color\"\n            id=\"color\"\n            value={this.state.color}\n            onChange={this.handleChange}\n            placeholder=\"(ex. yellow)\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"width\">Width</label>\n          <input\n            type=\"text\"\n            name=\"width\"\n            id=\"width\"\n            value={this.state.width}\n            onChange={this.handleChange}\n            placeholder=\"(ex. 100 px)\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height</label>\n          <input\n            type=\"text\"\n            name=\"height\"\n            id=\"height\"\n            value={this.state.height}\n            onChange={this.handleChange}\n            placeholder=\"(ex. 200 px)\"\n          />\n        </div>\n        <button onClick={this.handleSubmit}>Add a New Box</button>\n      </form>\n    );\n  }\n}\n\nexport default NewBoxForm;\n","import React from \"react\";\nimport \"./Box.css\";\n\nconst Box = props => {\n  let style = {\n    backgroundColor: props.color,\n    width: `${props.width}px`,\n    height: `${props.height}px`\n  };\n\n  return (\n    <div className=\"Box\">\n      <div style={style}>\n        <button onClick={props.removeBox}>x</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Box;\n","import React, { Component } from \"react\";\nimport \"./BoxList.css\";\nimport NewBoxForm from \"./NewBoxForm\";\nimport Box from \"./Box\";\n\nexport class BoxList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boxes: []\n    };\n    this.create = this.create.bind(this);\n  }\n\n  create(newBox) {\n    this.setState({\n      boxes: [...this.state.boxes, newBox]\n    });\n  }\n\n  remove(id) {\n    this.setState({\n      boxes: this.state.boxes.filter(box => box.id != id)\n    });\n  }\n\n  render() {\n    const boxes = this.state.boxes.map(box => (\n      <Box\n        key={box.id}\n        id={box.id}\n        color={box.color}\n        width={box.width}\n        height={box.height}\n        removeBox={() => this.remove(box.id)}\n      />\n    ));\n    return (\n      <div>\n        <NewBoxForm createBox={this.create} />\n        <div className=\"boxes\">{boxes}</div>\n      </div>\n    );\n  }\n}\n\nexport default BoxList;\n","import React from \"react\";\nimport \"./App.css\";\nimport BoxList from \"./BoxList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Color Box Maker</h1>\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}